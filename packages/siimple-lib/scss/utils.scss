//
// @siimple/lib - core scss library for siimple
// Under the MIT LICENSE.
// License:    https://github.com/siimple/siimple/blob/develop/LICENSE.md
// Repository: https://github.com/siimple/siimple
// Website:    https://www.siimple.xyz
//

@use "sass:color";
@use "sass:map";
@use "sass:meta";

//Alias for lighten($color, $amount)
//https://sass-lang.com/documentation/modules/color#lighten
@function lighten ($color, $amount) {
   @return color.adjust($color, $lightness: $amount); 
}

//Alias for darken ($color, $amount)
//https://sass-lang.com/documentation/modules/color#darken 
@function darken ($color, $amount) {
    @return color.adjust($color, $lightness: -$amount);
}

//Return the luminance of a color
//From: https://css-tricks.com/snippets/sass/luminance-color-function/ 
//Reference: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef 
@function luminance ($color) {
    $colors: ("red": red($color), "green": green($color), "blue": blue($color));
    @each $name, $value in $colors {
        $adjusted: 0;
        $value: $value / 255;
        @if $value < 0.03928 {
            $value: $value / 12.92;
        } @else {
            $value: ($value + .055) / 1.055;
            //Terrible hack to calculate pow($value, 2.4)
            $value: $value * $value;
        }
        $colors: map.merge($colors, ($name: $value));
    }
    @return (map.get($colors, "red") * .2126) + (map.get($colors, "green") * .7152) + (map.get($colors, "blue") * .0722);
}

//Check if the provided value is a color
@function is-color ($value) {
    @return meta.type-of($value) == "color";
}

//Check if the provided value is a string
@function is-string ($value) {
    @return meta.type-of($value) == "string";
}

//Alias for map.get
@function get ($map, $key) {
    @return map.get($map, $key);
}

//Alist for map.keys
@function keys ($map) {
    @return map.keys($map);
}

//Aliast for map.values
@function values ($map) {
    @return map.values($map);
}

